# Generated by Django 4.1.6 on 2023-02-26 06:50

import clients.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('clients', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelManagers(
            name='user',
            managers=[
                ('objects', clients.models.CustomUserManager()),
            ],
        ),
        migrations.RenameField(
            model_name='student',
            old_name='profile',
            new_name='user',
        ),
        migrations.RenameField(
            model_name='teacher',
            old_name='profile',
            new_name='user',
        ),
        migrations.RemoveField(
            model_name='user',
            name='date_joined',
        ),
        migrations.RemoveField(
            model_name='user',
            name='email_verify',
        ),
        migrations.RemoveField(
            model_name='user',
            name='username',
        ),
        migrations.AddField(
            model_name='teacherstudent',
            name='patronymic_name',
            field=models.TextField(blank=True, error_messages={'invalid': 'Отчество указанo некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Отчество'),
        ),
        migrations.AddField(
            model_name='teacherstudent',
            name='phone',
            field=models.TextField(null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Телефон введен некорректно. Введите телефон в формате +7(905)1234567', regex='^((\\+7|7|8)\\([0-9]{3}\\)[0-9]{7})')], verbose_name='Телефон'),
        ),
        migrations.AddField(
            model_name='user',
            name='patronymic_name',
            field=models.TextField(blank=True, error_messages={'invalid': 'Отчество указанo некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Отчество'),
        ),
        migrations.AlterField(
            model_name='teacherstudent',
            name='comment',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='teacherstudent',
            name='email',
            field=models.EmailField(error_messages={'invalid': 'E-mail введен некорректно!'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(), django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(254)], verbose_name='Электронная почта'),
        ),
        migrations.AlterField(
            model_name='teacherstudent',
            name='first_name',
            field=models.TextField(error_messages={'invalid': 'Имя указанo некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Имя'),
        ),
        migrations.AlterField(
            model_name='teacherstudent',
            name='last_name',
            field=models.TextField(error_messages={'invalid': 'Фамилия указана некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Фамилия'),
        ),
        migrations.AlterField(
            model_name='teacherstudent',
            name='student',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='teacherM2M', to='clients.student'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(error_messages={'invalid': 'E-mail введен некорректно!'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(), django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(254)], verbose_name='Электронная почта'),
        ),
        migrations.AlterField(
            model_name='user',
            name='first_name',
            field=models.TextField(error_messages={'invalid': 'Имя указанo некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Имя'),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=False, verbose_name='Подтверждение'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, verbose_name='Доступ к админке'),
        ),
        migrations.AlterField(
            model_name='user',
            name='last_name',
            field=models.TextField(error_messages={'invalid': 'Фамилия указана некорректно'}, validators=[django.core.validators.RegexValidator(regex='^[А-Я]{1}[а-яё-]{1, 49}|[A-Z]{1}[a-z-]{1, 49})$'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(50)], verbose_name='Фамилия'),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone',
            field=models.TextField(null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Телефон введен некорректно. Введите телефон в формате +7(905)1234567', regex='^((\\+7|7|8)\\([0-9]{3}\\)[0-9]{7})')], verbose_name='Телефон'),
        ),
    ]
